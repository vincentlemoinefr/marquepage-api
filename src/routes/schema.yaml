# Use https://editor.swagger.io/ to edit
# yaml to json https://onlineyamltools.com/convert-yaml-to-json
# https://spec.openapis.org/oas/v3.0.3
# https://swagger.io/specification/v3/
# https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md
# OpenAPI validator https://www.postman.com/postman/workspace/postman-open-technologies-governance-rules/overview

openapi: 3.0.3

info: 
  title: "Marquepage"
  description: "API interface for marquepage."
  contact:
    email: "vincent.lemoine.fr@gmail.com"
    name: "Marquepage API"
    url: "https://localhost"
  version: 0.0.1

servers:
- url: "https://localhost"
  description: "Base URL to marquepage API"

tags:
- name: "internal"
  description: "Endpoints related to the inner workings of the API"
- name: "binder"
  description: "A binder is a place where you store your bookmarks"
- name: "bookmark"
  description: "A bookmark is a website url you want to save for later"

# API paths summary
# /schema
# /binder
# /binder/{binderUuid}
# /folder
# /folder/{folderUuid}
# /bookmark
# /bookmark/{bookmarkUuid}



paths:
  "/schema":
    get:
      tags:
        - "internal"
      description: "Returns the OpenAPI schema"
      operationId: "schema_get"
      responses:
        200:
          description: OK
  "/binder":
    get:
      tags:
        - "binder"
      description: "Get all the binders you have access to"
      operationId: "binder_get"
      responses:
        200:
          description : todo
    post:
      tags:
        - "binder"
      description: "Create one or more binders, recieve corresponding uuid"
      operationId: "binder_post"
      responses:
        200:
          description : todo
  "/binder/{binderUuid}":
    get:
      tags:
        - "binder"
      description: "Get a binder from its uuid"
      operationId: "binder_get_by_uuid"
      parameters: []
      responses:
        200:
          description : todo
    patch:
      tags:
        - "binder"
      description: "Modify certain binders parameters, like its name"
      operationId: "binder_patch_by_uuid"
      parameters: []
      responses:
        200:
          description : todo
    delete:
      tags:
        - "binder"
      description: "Delete a binder by its uuid"
      operationId: "binder_delete_by_uuid"
      responses:
        200:
          description : todo
  "/bookmark":
    get:
      tags:
        - "binder"
      description: "Get all the binders you have access to"
      operationId: "binder_get"
      responses:
        200:
          description : todo
    post:
      tags:
        - "binder"
      description: "Create one or more binders, recieve corresponding uuid"
      operationId: "binder_post"
      responses:
        200:
          description : todo
  "/bookmark/{bookmarkUuid}":
    get:
      tags:
        - "bookmark"
      description: "Get a bookmark from its uuid"
      operationId: "bookmark_get_by_uuid"
      parameters: []
      responses:
        "201": {} # here is your bookmark
        "401": {} # you are not authenticated
        "403": {} # you don't have access to read this bookmark
        "404": {} # this bookmark doesn't exist
      security: []
    put:
      tags:
        - "bookmark"
      description: "Update all the bookmark fields"
      operationId: "bookmark_put_by_uuid"
      parameters: []
      requestBody: {}
      responses:
        "201": {} # you changed some value of the bookmark
        "401": {} # you are not authenticated
        "403": {} # you don't have access to update this bookmark
        "404": {} # this bookmark doesn't exist
      security: []
    delete:
      tags: 
        - "bookmark"
      description: "Delete a bookmark by its uuid"
      operationId: "bookmark_delete_by_uuid"
      parameters: []
      responses:
        "201": {} # you deleted the bookmark
        "401": {} # you are not authenticated
        "403": {} # you don't have access to delete this bookmark
        "404": {} # this bookmark doesn't exist
      security: []


components:
  schemas:
    serverSuccessCreateBinder:
      type: object
      description: Returns the binder you created with additionnal information
      properties:
        requestId:
          type: string
          format: uuid.v1
        responseStatus:
          type: integer
        responseMessage:
          type: string
    serverSuccessReadBinder:
      type: object
      description: Returns the binder you requested
      properties:
        requestId:
          type: string
          format: uuid.v1
        responseStatus:
          type: integer
        responseMessage:
          type: string
    serverSuccessReadAllBinder:
      type: object
      description: Returns all the binder you have access to
      properties:
        requestId:
          type: string
          format: uuid.v1
        responseStatus:
          type: integer
        responseMessage:
          type: string
    serverSuccessUpdateBinder:
      type: object
      description: Returns the information of the binder you updated
      properties:
        requestId:
          type: string
          format: uuid.v1
        responseStatus:
          type: integer
        responseMessage:
          type: string
    serverSuccessDeleteBinder:
      type: object
      description: Returns the information of the binder you deleted
      properties:
        requestId:
          type: string
          format: uuid.v1
        responseStatus:
          type: integer
        responseMessage:
          type: string
    serverSuccessCreateFolder:
      type: object
    serverSuccessReadFolder:
      type: object
    serverSuccessReadAllFolder:
      type: object
    serverSuccessUpdateFolder:
      type: object
    serverSuccessDeleteFolder:
      type: object
    serverSuccessCreateBookmark:
      type: object
    serverSuccessReadBookmark:
      type: object
    serverSuccessReadAllBookmark:
      type: object
    serverSuccessUpdateBookmark:
      type: object
    serverSuccessDeleteBookmark:
      type: object

    clientErrorBadRequest:
      type: object
      properties:
        requestId:
          type: string
          format: uuid.v1
        responseStatus:
          type: integer
        responseMessage:
          type: string
    clientErrorUnauthorized:
      type: object
      properties:
        requestId:
          type: string
          format: uuid.v1
        responseStatus:
          type: integer
        responseMessage:
          type: string
    clientErrorForbidden:
      type: object
      properties:
        requestId:
          type: string
          format: uuid.v1
        responseStatus:
          type: integer
        responseMessage:
          type: string
    clientErrorNotFound:
      type: object
      properties:
        requestId:
          type: string
          format: uuid.v1
        responseStatus:
          type: integer
        responseMessage:
          type: string
    clientErrorMethodNotAllowed:
      type: object
      properties:
        requestId:
          type: string
          format: uuid.v1
        responseStatus:
          type: integer
        responseMessage:
          type: string
    clientErrorNotAcceptable:
      type: object
      properties:
        requestId:
          type: string
          format: uuid.v1
        responseStatus:
          type: integer
        responseMessage:
          type: string
    clientErrorRequestTimeout:
      type: object
      properties:
        requestId:
          type: string
          format: uuid.v1
        responseStatus:
          type: integer
        responseMessage:
          type: string
    clientErrorConflict:
      type: object
      properties:
        requestId:
          type: string
          format: uuid.v1
        responseStatus:
          type: integer
        responseMessage:
          type: string
    clientErrorGone:
      type: object
      properties:
        requestId:
          type: string
          format: uuid.v1
        responseStatus:
          type: integer
        responseMessage:
          type: string
    clientErrorPayloadTooLarge:
      type: object
      properties:
        requestId:
          type: string
          format: uuid.v1
        responseStatus:
          type: integer
        responseMessage:
          type: string
    clientErrorUriTooLong:
      type: object
      properties:
        requestId:
          type: string
          format: uuid.v1
        responseStatus:
          type: integer
        responseMessage:
          type: string
    clientErrorUnprocessableContent:
      type: object
      properties:
        requestId:
          type: string
          format: uuid.v1
        responseStatus:
          type: integer
        responseMessage:
          type: string
    clientErrorUpgradeRequired:
      type: object
      properties:
        requestId:
          type: string
          format: uuid.v1
        responseStatus:
          type: integer
        responseMessage:
          type: string
    clientErrorTooManyRequests:
      type: object
      properties:
        requestId:
          type: string
          format: uuid.v1
        responseStatus:
          type: integer
        responseMessage:
          type: string
    clientErrorRequestHeaderFieldsTooLarge:
      type: object
      properties:
        requestId:
          type: string
          format: uuid.v1
        responseStatus:
          type: integer
        responseMessage:
          type: string
    serverErrorInternalServerError:
      type: object
      properties:
        requestId:
          type: string
          format: uuid.v1
        responseStatus:
          type: integer
        responseMessage:
          type: string
    serverErrorServiceUnavailable:
      type: object
      properties:
        requestId:
          type: string
          format: uuid.v1
        responseStatus:
          type: integer
        responseMessage:
          type: string

  responses:
    # Success
    200: # A 200 response always has a payload
      description: OK
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/serverSuccessCreateBinder'
              - $ref: '#/components/schemas/serverSuccessReadAllBinder'
              - $ref: '#/components/schemas/serverSuccessReadBinder'
              - $ref: '#/components/schemas/serverSuccessUpdateBinder'
              - $ref: '#/components/schemas/serverSuccessDeleteBinder'
              - $ref: '#/components/schemas/serverSuccessCreateFolder'
              - $ref: '#/components/schemas/serverSuccessReadFolder'
              - $ref: '#/components/schemas/serverSuccessReadAllFolder'
              - $ref: '#/components/schemas/serverSuccessUpdateFolder'
              - $ref: '#/components/schemas/serverSuccessDeleteFolder'
              - $ref: '#/components/schemas/serverSuccessCreateBookmark'
              - $ref: '#/components/schemas/serverSuccessReadBookmark'
              - $ref: '#/components/schemas/serverSuccessReadAllBookmark'
              - $ref: '#/components/schemas/serverSuccessUpdateBookmark'
              - $ref: '#/components/schemas/serverSuccessDeleteBookmark'

    # Client Erros, you fucked up.
    400: # Failed header, parameters or body validation (Pre-validation)
      description: Bad Request
    401: # Didn't send authentification or bad authentification 
      description: Unauthorized
    403: # Unauthorized on ressource or generic error from proxy (eg blacklisted)
      description: Forbidden
    404: # Ressource not found or uri invalid
      description: Not Found
    405: # When you use a bad HTTP method (eg TRACE)
      description: Method Not Allowed
    406: # When you use "Accept: application/rtf" and we don't accept it
      description: Not Acceptable
    408: # Failed to process request in time. (useful when we depend on others api or database)
      description: Request Timeout
    409: # Used if we want to handle concurrency, when 2 person modify in a short time
      description: Conflict
    410: # The ressource existed in the past but was deleted
      description: Gone
    413: # Self explanatory
      description: Payload Too Large
    414: # Self explanatory
      description: URI Too Long
    422: # Pre-validation OK but the content you sent was bad on the business logic side
      description: Unprocessable Content
    426: # Upgrade the protocol (eg HTTP/1.1 -> HTTP/3.0)
      description: Upgrade Required
    429: # Self explanatory
      description: Too Many Requests
    431: # Self explanatory
      description: Request Header Fields Too Large 

    # Server Errors, we fucked up.
    500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/serverErrorInternalServerError'
    503:
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/serverErrorServiceUnavailable'
    default:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/serverErrorInternalServerError'





  # Reusable response headers
  headers: {}
  # Reusable examples
  examples: {}
  # Reusable links
  links: {}
  # Reusable callbacks
  callbacks: {}

# Security ???
security: []
